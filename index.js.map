{"version":3,"file":"index.js","sources":["../src/client/create-client.ts"],"sourcesContent":["import { SanityReference, SanityKeyedReference } from '../types';\n\ninterface CreateClientOptions {\n  projectId: string;\n  dataset: string;\n  fetch: WindowOrWorkerGlobalScope['fetch'];\n  token?: string;\n  previewMode?: boolean;\n  disabledCache?: boolean;\n  useCdn?: boolean;\n}\n\ninterface SanityResult<T> {\n  ms: number;\n  query: string;\n  result: T[];\n}\n\nfunction createClient<Documents extends { _type: string; _id: string }>({\n  dataset,\n  projectId,\n  token,\n  previewMode: _previewMode = false,\n  fetch,\n  disabledCache,\n  useCdn,\n}: CreateClientOptions) {\n  const cache: { [key: string]: any } = {};\n  const previewModeRef = { current: _previewMode };\n\n  async function jsonFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        Accept: 'application/json',\n        ...options?.headers,\n      },\n    });\n    return (await response.json()) as T;\n  }\n\n  /**\n   * Given a type string and a document ID, this function returns a typed\n   * version of that document.\n   *\n   * If previewMode is true and a token is provided, then the client will prefer\n   * drafts over the published version.\n   */\n  async function get<T extends Documents['_type']>(\n    // NOTE: type is exclusively for typescript, it's not actually used in code\n    _type: T,\n    id: string\n  ) {\n    type R = Documents & { _type: T };\n\n    if (cache[id] && !disabledCache) {\n      return cache[id] as R;\n    }\n\n    const preview = previewModeRef.current && !!token;\n    const previewClause = preview\n      ? // sanity creates a new document with an _id prefix of `drafts.`\n        // for when a document is edited without being published\n        `|| _id==\"drafts.${id}\"`\n      : '';\n\n    const [result] = await query<R>(`* [_id == \"${id}\" ${previewClause}]`);\n\n    if (!disabledCache) {\n      cache[id] = result;\n    }\n    return result;\n  }\n\n  /**\n   * Gets all the documents of a particular type. In preview mode, if a document\n   * has a draft, that will be returned instead.\n   */\n  async function getAll<T extends Documents['_type']>(\n    type: T,\n    filterClause?: string\n  ) {\n    // force typescript to narrow the type using the intersection.\n    // TODO: might be a cleaner way to do this. this creates an ugly lookin type\n    type R = { _type: T } & Documents;\n\n    if (disabledCache) {\n      return await query<R>(\n        `* [_type == \"${type}\"${filterClause ? ` && ${filterClause}` : ''}]`\n      );\n    }\n\n    const ids = await query<{ _id: string }>(\n      `* [_type == \"${type}\"${\n        filterClause ? ` && ${filterClause}` : ''\n      }] { _id }`\n    );\n\n    const idsToFetch = ids.filter(({ _id }) => !cache[_id]);\n\n    const newDocumentList = await query<R>(\n      `* [_id in [${idsToFetch.map(({ _id }) => `'${_id}'`).join(', ')}]]`\n    );\n\n    for (const doc of newDocumentList) {\n      cache[doc._id] = doc;\n    }\n\n    return ids.map(({ _id }) => cache[_id] as R);\n  }\n\n  /**\n   * If a sanity document refers to another sanity document, then you can use this\n   * function to expand that document, preserving the type\n   */\n  async function expand<T extends Documents>(\n    ref: SanityReference<T> | SanityKeyedReference<T>\n  ) {\n    // this function is primarily for typescript\n    const response = await get<T['_type']>(null as any, ref._ref);\n    // since this is a ref, the response will be defined (unless weak reference)\n    return response!;\n  }\n\n  /**\n   * Passes a query along to sanity. If preview mode is active and a token is\n   * present, it will prefer drafts over the published versions.\n   */\n  async function query<T extends { _id: string } = any>(\n    query: string\n  ): Promise<T[]> {\n    const searchParams = new URLSearchParams();\n    const preview = previewModeRef.current && !!token;\n\n    searchParams.set('query', query);\n    const response = await jsonFetch<SanityResult<T>>(\n      `https://${projectId}.${\n        useCdn ? 'apicdn' : 'api'\n      }.sanity.io/v1/data/query/${dataset}?${searchParams.toString()}`,\n      {\n        // conditionally add the authorization header if the token is present\n        ...(preview && { headers: { Authorization: `Bearer ${token}` } }),\n      }\n    );\n\n    const prefix = 'drafts.';\n\n    if (!preview) {\n      return response.result.filter((doc) => !doc._id.startsWith(prefix));\n    }\n\n    const removeDraftPrefix = (_id: string) =>\n      _id.startsWith(prefix) ? _id.substring(prefix.length) : _id;\n\n    // create a lookup of only draft docs\n    const draftDocs = response.result\n      .filter((doc) => doc._id.startsWith('drafts.'))\n      .reduce<{ [_id: string]: T }>((acc, next) => {\n        acc[removeDraftPrefix(next._id)] = next;\n        return acc;\n      }, {});\n\n    // in this dictionary, if there is draft doc, that will be preferred,\n    // otherwise it'll use the published version\n    const finalAcc = response.result.reduce<{ [_id: string]: T }>(\n      (acc, next) => {\n        const id = removeDraftPrefix(next._id);\n        acc[id] = draftDocs[id] || next;\n        return acc;\n      },\n      {}\n    );\n\n    return Object.values(finalAcc);\n  }\n\n  /**\n   * Clears the in-memory cache. The cache can also be disabled when creating\n   * the client\n   */\n  function clearCache() {\n    const keys = Object.keys(cache);\n\n    for (const key of keys) {\n      delete cache[key];\n    }\n  }\n\n  /**\n   * Flip whether or not this client is using preview mode or not. Useful for\n   * preview mode within next.js.\n   */\n  function setPreviewMode(previewMode: boolean) {\n    previewModeRef.current = previewMode;\n  }\n\n  return { get, getAll, expand, query, clearCache, setPreviewMode };\n}\n\nexport default createClient;\n"],"names":["createClient","dataset","projectId","token","previewMode","_previewMode","fetch","disabledCache","useCdn","cache","previewModeRef","current","jsonFetch","url","options","headers","Accept","response","json","get","_type","id","preview","previewClause","query","result","getAll","type","filterClause","ids","idsToFetch","filter","_id","map","join","newDocumentList","doc","expand","ref","_ref","searchParams","URLSearchParams","set","toString","Authorization","prefix","startsWith","removeDraftPrefix","substring","length","draftDocs","reduce","acc","next","finalAcc","Object","values","clearCache","keys","key","setPreviewMode"],"mappings":"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"}