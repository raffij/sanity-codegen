{"version":3,"file":"index.esm.js","sources":["../src/client/create-client.ts"],"sourcesContent":["import { SanityReference, SanityKeyedReference } from '../types';\n\ninterface CreateClientOptions {\n  projectId: string;\n  dataset: string;\n  fetch: WindowOrWorkerGlobalScope['fetch'];\n  token?: string;\n  previewMode?: boolean;\n  disabledCache?: boolean;\n  useCdn?: boolean;\n}\n\ninterface SanityResult<T> {\n  ms: number;\n  query: string;\n  result: T[];\n}\n\nfunction createClient<Documents extends { _type: string; _id: string }>({\n  dataset,\n  projectId,\n  token,\n  previewMode: _previewMode = false,\n  fetch,\n  disabledCache,\n  useCdn,\n}: CreateClientOptions) {\n  const cache: { [key: string]: any } = {};\n  const previewModeRef = { current: _previewMode };\n\n  async function jsonFetch<T>(url: RequestInfo, options?: RequestInit) {\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        Accept: 'application/json',\n        ...options?.headers,\n      },\n    });\n    return (await response.json()) as T;\n  }\n\n  /**\n   * Given a type string and a document ID, this function returns a typed\n   * version of that document.\n   *\n   * If previewMode is true and a token is provided, then the client will prefer\n   * drafts over the published version.\n   */\n  async function get<T extends Documents['_type']>(\n    // NOTE: type is exclusively for typescript, it's not actually used in code\n    _type: T,\n    id: string\n  ) {\n    type R = Documents & { _type: T };\n\n    if (cache[id] && !disabledCache) {\n      return cache[id] as R;\n    }\n\n    const preview = previewModeRef.current && !!token;\n    const previewClause = preview\n      ? // sanity creates a new document with an _id prefix of `drafts.`\n        // for when a document is edited without being published\n        `|| _id==\"drafts.${id}\"`\n      : '';\n\n    const [result] = await query<R>(`* [_id == \"${id}\" ${previewClause}]`);\n\n    if (!disabledCache) {\n      cache[id] = result;\n    }\n    return result;\n  }\n\n  /**\n   * Gets all the documents of a particular type. In preview mode, if a document\n   * has a draft, that will be returned instead.\n   */\n  async function getAll<T extends Documents['_type']>(\n    type: T,\n    filterClause?: string\n  ) {\n    // force typescript to narrow the type using the intersection.\n    // TODO: might be a cleaner way to do this. this creates an ugly lookin type\n    type R = { _type: T } & Documents;\n\n    if (disabledCache) {\n      return await query<R>(\n        `* [_type == \"${type}\"${filterClause ? ` && ${filterClause}` : ''}]`\n      );\n    }\n\n    const ids = await query<{ _id: string }>(\n      `* [_type == \"${type}\"${\n        filterClause ? ` && ${filterClause}` : ''\n      }] { _id }`\n    );\n\n    const idsToFetch = ids.filter(({ _id }) => !cache[_id]);\n\n    const newDocumentList = await query<R>(\n      `* [_id in [${idsToFetch.map(({ _id }) => `'${_id}'`).join(', ')}]]`\n    );\n\n    for (const doc of newDocumentList) {\n      cache[doc._id] = doc;\n    }\n\n    return ids.map(({ _id }) => cache[_id] as R);\n  }\n\n  /**\n   * If a sanity document refers to another sanity document, then you can use this\n   * function to expand that document, preserving the type\n   */\n  async function expand<T extends Documents>(\n    ref: SanityReference<T> | SanityKeyedReference<T>\n  ) {\n    // this function is primarily for typescript\n    const response = await get<T['_type']>(null as any, ref._ref);\n    // since this is a ref, the response will be defined (unless weak reference)\n    return response!;\n  }\n\n  /**\n   * Passes a query along to sanity. If preview mode is active and a token is\n   * present, it will prefer drafts over the published versions.\n   */\n  async function query<T extends { _id: string } = any>(\n    query: string\n  ): Promise<T[]> {\n    const searchParams = new URLSearchParams();\n    const preview = previewModeRef.current && !!token;\n\n    searchParams.set('query', query);\n    const response = await jsonFetch<SanityResult<T>>(\n      `https://${projectId}.${\n        useCdn ? 'apicdn' : 'api'\n      }.sanity.io/v1/data/query/${dataset}?${searchParams.toString()}`,\n      {\n        // conditionally add the authorization header if the token is present\n        ...(preview && { headers: { Authorization: `Bearer ${token}` } }),\n      }\n    );\n\n    const prefix = 'drafts.';\n\n    if (!preview) {\n      return response.result.filter((doc) => !doc._id.startsWith(prefix));\n    }\n\n    const removeDraftPrefix = (_id: string) =>\n      _id.startsWith(prefix) ? _id.substring(prefix.length) : _id;\n\n    // create a lookup of only draft docs\n    const draftDocs = response.result\n      .filter((doc) => doc._id.startsWith('drafts.'))\n      .reduce<{ [_id: string]: T }>((acc, next) => {\n        acc[removeDraftPrefix(next._id)] = next;\n        return acc;\n      }, {});\n\n    // in this dictionary, if there is draft doc, that will be preferred,\n    // otherwise it'll use the published version\n    const finalAcc = response.result.reduce<{ [_id: string]: T }>(\n      (acc, next) => {\n        const id = removeDraftPrefix(next._id);\n        acc[id] = draftDocs[id] || next;\n        return acc;\n      },\n      {}\n    );\n\n    return Object.values(finalAcc);\n  }\n\n  /**\n   * Clears the in-memory cache. The cache can also be disabled when creating\n   * the client\n   */\n  function clearCache() {\n    const keys = Object.keys(cache);\n\n    for (const key of keys) {\n      delete cache[key];\n    }\n  }\n\n  /**\n   * Flip whether or not this client is using preview mode or not. Useful for\n   * preview mode within next.js.\n   */\n  function setPreviewMode(previewMode: boolean) {\n    previewModeRef.current = previewMode;\n  }\n\n  return { get, getAll, expand, query, clearCache, setPreviewMode };\n}\n\nexport default createClient;\n"],"names":["createClient","dataset","projectId","token","previewMode","_previewMode","fetch","disabledCache","useCdn","cache","previewModeRef","current","jsonFetch","url","options","response","headers","Accept","json","get","_type","id","preview","previewClause","result","query","getAll","type","filterClause","ids","idsToFetch","filter","_id","newDocumentList","map","join","doc","expand","ref","_ref","searchParams","URLSearchParams","set","toString","Authorization","prefix","startsWith","removeDraftPrefix","substring","length","draftDocs","reduce","acc","next","finalAcc","Object","values","clearCache","keys","key","setPreviewMode"],"mappings":"AAkBA,SAASA,YAAT,CAAwE;AACtEC,EAAAA,OADsE;AAEtEC,EAAAA,SAFsE;AAGtEC,EAAAA,KAHsE;AAItEC,EAAAA,WAAW,EAAEC,YAAY,GAAG,KAJ0C;AAKtEC,EAAAA,KALsE;AAMtEC,EAAAA,aANsE;AAOtEC,EAAAA;AAPsE,CAAxE,EAQwB;AACtB,QAAMC,KAA6B,GAAG,EAAtC;AACA,QAAMC,cAAc,GAAG;AAAEC,IAAAA,OAAO,EAAEN;AAAX,GAAvB;;AAEA,iBAAeO,SAAf,CAA4BC,GAA5B,EAA8CC,OAA9C,EAAqE;AACnE,UAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACO,GAAD,oBACvBC,OADuB;AAE1BE,MAAAA,OAAO;AACLC,QAAAA,MAAM,EAAE;AADH,SAEFH,OAFE,aAEFA,OAFE,uBAEFA,OAAO,CAAEE,OAFP;AAFmB,OAA5B;AAOA,WAAQ,MAAMD,QAAQ,CAACG,IAAT,EAAd;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACE,iBAAeC,GAAf;AAEEC,EAAAA,KAFF,EAGEC,EAHF,EAIE;AAGA,QAAIZ,KAAK,CAACY,EAAD,CAAL,IAAa,CAACd,aAAlB,EAAiC;AAC/B,aAAOE,KAAK,CAACY,EAAD,CAAZ;AACD;;AAED,UAAMC,OAAO,GAAGZ,cAAc,CAACC,OAAf,IAA0B,CAAC,CAACR,KAA5C;AACA,UAAMoB,aAAa,GAAGD,OAAO;AAEzB;AACC,uBAAkBD,EAAG,GAHG,GAIzB,EAJJ;AAMA,UAAM,CAACG,MAAD,IAAW,MAAMC,KAAK,CAAK,cAAaJ,EAAG,KAAIE,aAAc,GAAvC,CAA5B;;AAEA,QAAI,CAAChB,aAAL,EAAoB;AAClBE,MAAAA,KAAK,CAACY,EAAD,CAAL,GAAYG,MAAZ;AACD;;AACD,WAAOA,MAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,iBAAeE,MAAf,CACEC,IADF,EAEEC,YAFF,EAGE;AACA;AACA;AAGA,QAAIrB,aAAJ,EAAmB;AACjB,aAAO,MAAMkB,KAAK,CACf,gBAAeE,IAAK,IAAGC,YAAY,GAAI,OAAMA,YAAa,EAAvB,GAA2B,EAAG,GADlD,CAAlB;AAGD;;AAED,UAAMC,GAAG,GAAG,MAAMJ,KAAK,CACpB,gBAAeE,IAAK,IACnBC,YAAY,GAAI,OAAMA,YAAa,EAAvB,GAA2B,EACxC,WAHoB,CAAvB;AAMA,UAAME,UAAU,GAAGD,GAAG,CAACE,MAAJ,CAAW,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAa,CAACvB,KAAK,CAACuB,GAAD,CAA9B,CAAnB;AAEA,UAAMC,eAAe,GAAG,MAAMR,KAAK,CAChC,cAAaK,UAAU,CAACI,GAAX,CAAe,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAc,IAAGA,GAAI,GAApC,EAAwCG,IAAxC,CAA6C,IAA7C,CAAmD,IADhC,CAAnC;;AAIA,SAAK,MAAMC,GAAX,IAAkBH,eAAlB,EAAmC;AACjCxB,MAAAA,KAAK,CAAC2B,GAAG,CAACJ,GAAL,CAAL,GAAiBI,GAAjB;AACD;;AAED,WAAOP,GAAG,CAACK,GAAJ,CAAQ,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAavB,KAAK,CAACuB,GAAD,CAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,iBAAeK,MAAf,CACEC,GADF,EAEE;AACA;AACA,UAAMvB,QAAQ,GAAG,MAAMI,GAAG,CAAa,IAAb,EAA0BmB,GAAG,CAACC,IAA9B,CAA1B,CAFA;;AAIA,WAAOxB,QAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,iBAAeU,KAAf,CACEA,KADF,EAEgB;AACd,UAAMe,YAAY,GAAG,IAAIC,eAAJ,EAArB;AACA,UAAMnB,OAAO,GAAGZ,cAAc,CAACC,OAAf,IAA0B,CAAC,CAACR,KAA5C;AAEAqC,IAAAA,YAAY,CAACE,GAAb,CAAiB,OAAjB,EAA0BjB,KAA1B;AACA,UAAMV,QAAQ,GAAG,MAAMH,SAAS,CAC7B,WAAUV,SAAU,IACnBM,MAAM,GAAG,QAAH,GAAc,KACrB,4BAA2BP,OAAQ,IAAGuC,YAAY,CAACG,QAAb,EAAwB,EAHjC,oBAMxBrB,OAAO,IAAI;AAAEN,MAAAA,OAAO,EAAE;AAAE4B,QAAAA,aAAa,EAAG,UAASzC,KAAM;AAAjC;AAAX,KANa,EAAhC;AAUA,UAAM0C,MAAM,GAAG,SAAf;;AAEA,QAAI,CAACvB,OAAL,EAAc;AACZ,aAAOP,QAAQ,CAACS,MAAT,CAAgBO,MAAhB,CAAwBK,GAAD,IAAS,CAACA,GAAG,CAACJ,GAAJ,CAAQc,UAAR,CAAmBD,MAAnB,CAAjC,CAAP;AACD;;AAED,UAAME,iBAAiB,GAAIf,GAAD,IACxBA,GAAG,CAACc,UAAJ,CAAeD,MAAf,IAAyBb,GAAG,CAACgB,SAAJ,CAAcH,MAAM,CAACI,MAArB,CAAzB,GAAwDjB,GAD1D,CArBc;;;AAyBd,UAAMkB,SAAS,GAAGnC,QAAQ,CAACS,MAAT,CACfO,MADe,CACPK,GAAD,IAASA,GAAG,CAACJ,GAAJ,CAAQc,UAAR,CAAmB,SAAnB,CADD,EAEfK,MAFe,CAEc,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC3CD,MAAAA,GAAG,CAACL,iBAAiB,CAACM,IAAI,CAACrB,GAAN,CAAlB,CAAH,GAAmCqB,IAAnC;AACA,aAAOD,GAAP;AACD,KALe,EAKb,EALa,CAAlB,CAzBc;AAiCd;;AACA,UAAME,QAAQ,GAAGvC,QAAQ,CAACS,MAAT,CAAgB2B,MAAhB,CACf,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb,YAAMhC,EAAE,GAAG0B,iBAAiB,CAACM,IAAI,CAACrB,GAAN,CAA5B;AACAoB,MAAAA,GAAG,CAAC/B,EAAD,CAAH,GAAU6B,SAAS,CAAC7B,EAAD,CAAT,IAAiBgC,IAA3B;AACA,aAAOD,GAAP;AACD,KALc,EAMf,EANe,CAAjB;AASA,WAAOG,MAAM,CAACC,MAAP,CAAcF,QAAd,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,WAASG,UAAT,GAAsB;AACpB,UAAMC,IAAI,GAAGH,MAAM,CAACG,IAAP,CAAYjD,KAAZ,CAAb;;AAEA,SAAK,MAAMkD,GAAX,IAAkBD,IAAlB,EAAwB;AACtB,aAAOjD,KAAK,CAACkD,GAAD,CAAZ;AACD;AACF;AAED;AACF;AACA;AACA;;;AACE,WAASC,cAAT,CAAwBxD,WAAxB,EAA8C;AAC5CM,IAAAA,cAAc,CAACC,OAAf,GAAyBP,WAAzB;AACD;;AAED,SAAO;AAAEe,IAAAA,GAAF;AAAOO,IAAAA,MAAP;AAAeW,IAAAA,MAAf;AAAuBZ,IAAAA,KAAvB;AAA8BgC,IAAAA,UAA9B;AAA0CG,IAAAA;AAA1C,GAAP;AACD;;;;"}